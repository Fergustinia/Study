read.csv("flats.csv", sep=";", fileEncoding="UTF-8", stringsAsFactors=FALSE),
error = function(e) {
cat("UTF-8 with semicolon failed. Trying cp1251 with semicolon...\n")
read.csv("flats.csv", sep=";", fileEncoding="cp1251", stringsAsFactors=FALSE)
}
)
cat("Data loaded. First few rows:\n")
print(head(flats))
# 2. Rename columns to Latin names
colnames(flats) <- c("price_thousands", "area_sqm", "rooms", "floor", "distance")
# 3. Visualize data
# Histograms
par(mfrow=c(2,3))
for(col in colnames(flats)) {
hist(flats[[col]], main=paste("Histogram of", col), xlab=col)
}
# Scatter plots
pairs(flats, main="Scatter Plot Matrix")
# Boxplots
par(mfrow=c(1,3))
for(col in colnames(flats)[-1]) {  # Skip price_thousands to fit 3 plots
boxplot(flats[[col]], main=paste("Boxplot of", col))
}
# 4. Check correlations
cor_matrix <- cor(flats, use="complete.obs")
print("Correlation Matrix:")
print(cor_matrix)
# 5. Simple linear regression: price ~ area
model1 <- lm(price_thousands ~ area_sqm, data=flats)
summary(model1)
# 6. Check residuals for normality
shapiro.test(residuals(model1))
qqnorm(residuals(model1))
qqline(residuals(model1))
# 7. Check for heteroscedasticity
bptest(model1)
plot(fitted(model1), residuals(model1), main="Residuals vs Fitted", xlab="Fitted", ylab="Residuals")
abline(h=0, col="red")
# 8. Address heteroscedasticity
# Method 1: Divide by area
flats$price_per_area <- flats$price_thousands / flats$area_sqm
model2 <- lm(price_per_area ~ area_sqm, data=flats)
# Method 2: Log-transform price
flats$log_price <- log(flats$price_thousands)
model3 <- lm(log_price ~ area_sqm, data=flats)
# 9. New model (using log-transformed price)
summary(model3)
# 10. Check residuals of new model for normality
shapiro.test(residuals(model3))
qqnorm(residuals(model3))
qqline(residuals(model3))
# 11. Check new model for heteroscedasticity
bptest(model3)
plot(fitted(model3), residuals(model3), main="Residuals vs Fitted (Log Model)", xlab="Fitted", ylab="Residuals")
abline(h=0, col="red")
# 12. Scatter plot with regression line and confidence intervals
ggplot(flats, aes(x=area_sqm, y=log_price)) +
geom_point() +
geom_smooth(method="lm", level=0.95) +
labs(title="Log(Price) vs Area with Regression Line and CI", x="Area (sqm)", y="Log(Price in Thousands)")
# 13. Multiple regression with all factors
model_multi <- lm(price_thousands ~ area_sqm + rooms + floor + distance, data=flats)
summary(model_multi)
# 14. Remove insignificant factors (based on p-values > 0.05)
# Check summary(model_multi) to identify insignificant factors
# Example: Assume 'floor' and 'distance' are insignificant (update based on actual output)
model_multi_reduced <- lm(price_thousands ~ area_sqm + rooms, data=flats)
summary(model_multi_reduced)
cat("Insignificant factors (e.g., floor, distance) removed due to p-values > 0.05, indicating they do not significantly influence price.\n")
# 15. Predict for a hypothetical apartment
my_flat <- data.frame(area_sqm=60, rooms=2)
prediction <- predict(model_multi_reduced, newdata=my_flat, interval="confidence")
print("Prediction for my flat (price in thousands):")
print(prediction)
# 16. Residual analysis for multiple regression
shapiro.test(residuals(model_multi_reduced))
bptest(model_multi_reduced)
par(mfrow=c(2,2))
plot(model_multi_reduced)
# 17. Address heteroscedasticity in multiple regression
model_multi_log <- lm(log_price ~ area_sqm + rooms, data=flats)
summary(model_multi_log)
bptest(model_multi_log)
plot(fitted(model_multi_log), residuals(model_multi_log), main="Residuals vs Fitted (Multi Log Model)", xlab="Fitted", ylab="Residuals")
abline(h=0, col="red")
# Load libraries
library(ggplot2)
library(MASS)
library(lmtest)
library(car)
# Debug: Check working directory
print("Current working directory:")
print(getwd())
# Debug: Read raw file content to inspect
cat("Reading raw content of flats.csv...\n")
con <- file("flats.csv", encoding="UTF-8")
lines <- readLines(con)
print(lines[1:5])  # Print first 5 lines
close(con)
# Load libraries
library(ggplot2)
library(MASS)
library(lmtest)
library(car)
# Debug: Check working directory
print("Current working directory:")
print(getwd())
# 1. Read raw file content and clean it
cat("Reading raw content of flats.csv...\n")
con <- file("flats.csv", encoding="UTF-8")
lines <- readLines(con, warn=FALSE)  # Suppress warning for now
close(con)
# Remove BOM if present (common in UTF-8 files from Excel)
if (length(lines) > 0 && grepl("^ï»¿", lines[1])) {
lines[1] <- substring(lines[1], 4)  # Remove BOM
}
print("First 5 raw lines after cleaning:")
print(lines[1:5])
# Parse CSV manually to handle encoding issues
data <- read.table(text=lines, header=TRUE, sep=";", fileEncoding="UTF-8", stringsAsFactors=FALSE)
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
а
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# Интерпретация результатов для оценки эффективности лекарства
cat("\nВывод об эффективности лекарства:\n")
if (test1$p.value < 0.05 & test4$p.value >= 0.05) {
cat("Лекарство эффективно: пульс пациентов значительно изменился после лечения (p = ",
round(test1$p.value, 4), "), и после лечения пульс пациентов не отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
} else if (test1$p.value >= 0.05) {
cat("Лекарство неэффективно: пульс пациентов не изменился после лечения (p = ",
round(test1$p.value, 4), ").\n")
} else {
cat("Лекарство изменило пульс пациентов (p = ", round(test1$p.value, 4),
"), но после лечения пульс пациентов все еще значительно отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
}
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# CB-До лечения EB-ЛО отдыха CA-После лечения EA-После отдыха
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# Интерпретация результатов для оценки эффективности лекарства
cat("\nВывод об эффективности лекарства:\n")
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# CB-До лечения EB-ЛО отдыха CA-После лечения EA-После отдыха
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# Интерпретация результатов для оценки эффективности лекарства
cat("\nВывод об эффективности лекарства:\n")
if (test1$p.value < 0.05 & test4$p.value >= 0.05) {
cat("Лекарство эффективно: пульс пациентов значительно изменился после лечения (p = ",
round(test1$p.value, 4), "), и после лечения пульс пациентов не отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
} else if (test1$p.value >= 0.05) {
cat("Лекарство неэффективно: пульс пациентов не изменился после лечения (p = ",
round(test1$p.value, 4), ").\n")
} else {
cat("Лекарство изменило пульс пациентов (p = ", round(test1$p.value, 4),
"), но после лечения пульс пациентов все еще значительно отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
}
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# CB-До лечения EB-ЛО отдыха CA-После лечения EA-После отдыха
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# Интерпретация результатов для оценки эффективности лекарства
cat("\nВывод об эффективности лекарства:\n")
if (test1$p.value < 0.05 & test4$p.value >= 0.05) {
cat("Лекарство эффективно: пульс пациентов значительно изменился после лечения (p = ",
round(test1$p.value, 4), "), и после лечения пульс пациентов не отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
} else if (test1$p.value >= 0.05) {
cat("Лекарство неэффективно: пульс пациентов не изменился после лечения (p = ",
round(test1$p.value, 4), ").\n")
} else {
cat("Лекарство изменило пульс пациентов (p = ", round(test1$p.value, 4),
"), но после лечения пульс пациентов все еще значительно отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
}
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# 1. Загрузка данных
grades <- read.table("grades.txt", header = TRUE)
# 1. Загрузка данных
grades <- read.table("grades.txt", header = TRUE)
# Шаг 1: Загрузка данных из файла
grades <- read.table("grades.txt", header = TRUE, check.names = FALSE)
# Шаг 1: Загрузка данных из файла
grades <- read.table("grades.txt", header = TRUE, check.names = FALSE)
# Шаг 2: Преобразование таблицы из wide в long формат
# Создаём два столбца: Group и Grade
grades_long <- data.frame(
Group = rep(colnames(grades), each = nrow(grades)),
Grade = as.vector(as.matrix(grades))
)
# Шаг 1: Загрузка данных из файла
grades <- read.table("grades.txt", header = TRUE, sep = "\t", check.names = FALSE)
# Шаг 2: Преобразование таблицы из wide в long формат
# Создаём два столбца: Group и Grade
grades_long <- data.frame(
Group = rep(colnames(grades), each = nrow(grades)),
Grade = as.vector(as.matrix(grades))
)
# Шаг 3: Построение таблицы сопряжённости
contingency_table <- table(grades_long$Group, grades_long$Grade)
cat("\n--- Таблица сопряженности ---\n")
print(contingency_table)
# Шаг 4: Применение критерия хи-квадрат
chi_result <- chisq.test(contingency_table)
# Шаг 5: Вывод результата
cat("\n--- Результаты критерия хи-квадрат ---\n")
print(chi_result)
# Шаг 6: Интерпретация
if (chi_result$p.value < 0.05) {
cat("Вывод: между группой и оценкой есть статистически значимая связь (p =", round(chi_result$p.value, 4), ").\n")
} else {
cat("Вывод: статистически значимая связь между группой и оценкой отсутствует (p =", round(chi_result$p.value, 4), ").\n")
}
# Шаг 3: Построение таблицы сопряжённости
contingency_table <- table(grades_long$Group, grades_long$Grade)
cat("\n--- Таблица сопряженности ---\n")
print(contingency_table)
# Шаг 4: Применение критерия хи-квадрат
chi_result <- chisq.test(contingency_table)
# Шаг 5: Вывод результата
cat("\n--- Результаты критерия хи-квадрат ---\n")
print(chi_result)
# Загрузка данных
pulse <- read.table("pulse.txt", header = TRUE, fill = TRUE, na.strings = c("", "NA"))
# CB-До лечения EB-ЛО отдыха CA-После лечения EA-После отдыха
# --- Шаг 1: Проверка нормальности (визуально и тестом Шапиро-Уилка) ---
par(mfrow = c(2, 2))
for (g in names(pulse)) {
qqnorm(na.omit(pulse[[g]]), main = paste("QQ-Plot", g))
qqline(na.omit(pulse[[g]]))
}
shapiro.results <- sapply(pulse, function(x) shapiro.test(na.omit(x))$p.value)
print(round(shapiro.results, 4))
# --- Шаг 2: Сравнение "до" и "после" в каждой группе (парные тесты) ---
paired_patients <- pulse[complete.cases(pulse$CB, pulse$CA), ]
paired_healthy  <- pulse[complete.cases(pulse$EB, pulse$EA), ]
# Wilcoxon с подавлением предупреждений
test1 <- wilcox.test(paired_patients$CB, paired_patients$CA, paired = TRUE, exact = FALSE)
test2 <- wilcox.test(paired_healthy$EB, paired_healthy$EA, paired = TRUE, exact = FALSE)
# --- Шаг 3: Сравнение пациентов и здоровых (независимые тесты) ---
cb_eb <- pulse[complete.cases(pulse$CB, pulse$EB), ]
ca_ea <- pulse[complete.cases(pulse$CA, pulse$EA), ]
test3 <- wilcox.test(cb_eb$CB, cb_eb$EB, exact = FALSE)
test4 <- wilcox.test(ca_ea$CA, ca_ea$EA, exact = FALSE)
# --- Шаг 4: Таблица с результатами и интерпретацией ---
results <- data.frame(
Сравнение = c("Пациенты: до vs после", "Здоровые: до vs после",
"До: пациенты vs здоровые", "После: пациенты vs здоровые"),
P_value = round(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value), 4),
Значимость = ifelse(c(test1$p.value, test2$p.value, test3$p.value, test4$p.value) < 0.05,
"Значимо", "Не значимо")
)
print(results)
# Интерпретация результатов для оценки эффективности лекарства
cat("\nВывод об эффективности лекарства:\n")
if (test1$p.value < 0.05 & test4$p.value >= 0.05) {
cat("Лекарство эффективно: пульс пациентов значительно изменился после лечения (p = ",
round(test1$p.value, 4), "), и после лечения пульс пациентов не отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
} else if (test1$p.value >= 0.05) {
cat("Лекарство неэффективно: пульс пациентов не изменился после лечения (p = ",
round(test1$p.value, 4), ").\n")
} else {
cat("Лекарство изменило пульс пациентов (p = ", round(test1$p.value, 4),
"), но после лечения пульс пациентов все еще значительно отличается от пульса здоровых (p = ",
round(test4$p.value, 4), ").\n")
}
# --- Шаг 5: Графики коробок с усами ---
par(mfrow = c(2, 2))
boxplot(paired_patients$CB, paired_patients$CA, names = c("CB", "CA"),
main = "Пациенты: до и после", col = c("skyblue", "lightgreen"))
boxplot(paired_healthy$EB, paired_healthy$EA, names = c("EB", "EA"),
main = "Здоровые: до и после", col = c("skyblue", "lightgreen"))
boxplot(cb_eb$CB, cb_eb$EB, names = c("CB", "EB"),
main = "До: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
boxplot(ca_ea$CA, ca_ea$EA, names = c("CA", "EA"),
main = "После: пациенты vs здоровые", col = c("lightcoral", "lightgray"))
# Шаг 1: Загрузка данных из файла
grades <- read.table("grades.txt", header = TRUE, sep = "\t", check.names = FALSE)
# Шаг 2: Преобразование таблицы из wide в long формат
# Создаём два столбца: Group и Grade
grades_long <- data.frame(
Group = rep(colnames(grades), each = nrow(grades)),
Grade = as.vector(as.matrix(grades))
)
# Шаг 3: Построение таблицы сопряжённости
contingency_table <- table(grades_long$Group, grades_long$Grade)
cat("\n--- Таблица сопряженности ---\n")
print(contingency_table)
# Шаг 4: Применение критерия хи-квадрат
chi_result <- chisq.test(contingency_table)
# Шаг 5: Вывод результата
cat("\n--- Результаты критерия хи-квадрат ---\n")
print(chi_result)
# Шаг 6: Интерпретация
if (chi_result$p.value < 0.05) {
cat("Вывод: между группой и оценкой есть статистически значимая связь (p =", round(chi_result$p.value, 4), ").\n")
} else {
cat("Вывод: статистически значимая связь между группой и оценкой отсутствует (p =", round(chi_result$p.value, 4), ").\n")
}
